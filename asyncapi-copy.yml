asyncapi: 3.0.0

info:
  title: AssemblyAI Streaming WebSocket API
  version: 1.0.0
  description: |
    Real-time speech-to-text transcription API over WebSocket.
    Clients send audio data and configuration messages and receive transcription events.

servers:
  production:
    host: api.assemblyai.com
    protocol: wss
    description: Production WebSocket endpoint

channels:
  streaming:
    address: /v3/ws
    description: Main channel for bi-directional audio and transcription data
    servers:
      - $ref: "#/servers/production"
    parameters:
      sample_rate:
        description: Sample rate of the audio stream
        location: $message.payload#/sample_rate
        examples: ["16000", "48000"]

      encoding:
        description: Encoding of the audio stream
        location: $message.payload#/encoding
        enum: ["pcm_s16le", "pcm_mulaw"]

      formatted_finals:
        description: Whether to return formatted final transcripts
        location: $message.payload#/formatted_finals
        enum:
          - "true"
          - "false"
        examples:
          - "true"

      word_finalization_max_wait_time:
        description: The max amount of time in milliseconds to wait for a word to be finalized
        location: $message.payload#/word_finalization_max_wait_time
        examples:
          - "160"
          - "200"

      end_of_turn_confidence_threshold:
        description: The confidence threshold to use when determining if the end of a turn has been reached
        location: $message.payload#/end_of_turn_confidence_threshold
        examples:
          - "0.4"
          - "0.7"

      min_end_of_turn_silence_when_confident:
        description: The minimum amount of silence required to detect end of turn when confident
        location: $message.payload#/min_end_of_turn_silence_when_confident
        examples:
          - "480"
          - "600"

      max_turn_silence:
        description: The maximum amount of silence allowed in a turn before end of turn is triggered
        location: $message.payload#/max_turn_silence
        examples:
          - "700"
          - "1000"
    messages:
      # Client sends these messages (payloads are JSON objects sent over WebSocket)
      updateConfiguration:
        $ref: "#/components/messages/UpdateConfiguration"
      forceEndpoint:
        $ref: "#/components/messages/ForceEndpoint"
      sessionTermination:
        $ref: "#/components/messages/SessionTermination"
      audioChunk:
        $ref: "#/components/messages/AudioChunk"

      # Server sends these messages (payloads are JSON objects received over WebSocket)
      sessionBegins:
        $ref: "#/components/messages/SessionBegins"
      transcript:
        $ref: "#/components/messages/Transcript"
      turn:
        $ref: "#/components/messages/Turn"
      termination:
        $ref: "#/components/messages/Termination"
      errorOccurred:
        $ref: "#/components/messages/ErrorOccurred" # New error message

operations:
  # Client sending operations
  sendAudio:
    action: send
    channel:
      $ref: "#/channels/streaming"
    messages:
      - $ref: "#/channels/streaming/messages/audioChunk"
    description: Send audio data chunks for transcription.

  sendUpdateConfiguration:
    action: send
    channel:
      $ref: "#/channels/streaming"
    messages:
      - $ref: "#/channels/streaming/messages/updateConfiguration"
    description: Update streaming configuration parameters during an active session.

  sendForceEndpoint:
    action: send
    channel:
      $ref: "#/channels/streaming"
    messages:
      - $ref: "#/channels/streaming/messages/forceEndpoint"
    description: Manually force an endpoint in the transcription by sending an empty JSON object `{}`.

  sendSessionTermination:
    action: send
    channel:
      $ref: "#/channels/streaming"
    messages:
      - $ref: "#/channels/streaming/messages/sessionTermination"
    description: Gracefully terminate the streaming session.

  # Server receiving operations
  receiveSessionBegins:
    action: receive
    channel:
      $ref: "#/channels/streaming"
    messages:
      - $ref: "#/channels/streaming/messages/sessionBegins"
    description: Receive confirmation that the streaming session has successfully started.

  receiveTranscript:
    action: receive
    channel:
      $ref: "#/channels/streaming"
    messages:
      - $ref: "#/channels/streaming/messages/transcript"
    description: Receive real-time transcription results (can be partial or final).

  receiveTurn:
    action: receive
    channel:
      $ref: "#/channels/streaming"
    messages:
      - $ref: "#/channels/streaming/messages/turn"
    description: Receive a formatted turn-based transcription result.

  receiveTermination:
    action: receive
    channel:
      $ref: "#/channels/streaming"
    messages:
      - $ref: "#/channels/streaming/messages/termination"
    description: Receive confirmation that the session has been terminated by the server.

  receiveError:
    action: receive
    channel:
      $ref: "#/channels/streaming"
    messages:
      - $ref: "#/channels/streaming/messages/errorOccurred"
    description: Receive an error message from the server if an issue occurs.

components:
  # securitySchemes:
  #   ApiKeyAuth:
  #     type: apiKey
  #     in: header
  #     name: Authorization # AssemblyAI uses the Authorization header for the API key
  #     description: API key for authenticating requests. The key itself is provided as the header value.

  messages:
    # Client to Server Messages
    UpdateConfiguration:
      name: UpdateConfiguration
      title: Update Streaming Configuration
      summary: Client message to update streaming configuration parameters during an active session.
      contentType: application/json
      payload:
        $ref: "#/components/schemas/UpdateConfigurationPayload"

    ForceEndpoint:
      name: ForceEndpoint
      title: Force Endpoint
      summary: Client message to manually force an endpoint in the transcription.
      contentType: application/json
      payload:
        $ref: "#/components/schemas/ForceEndpointPayload"
      examples:
        - payload:
            type: ForceEndpoint

    SessionTermination:
      name: SessionTermination
      title: Terminate Session (Client Initiated)
      summary: Client message to gracefully terminate the streaming session.
      contentType: application/json
      payload:
        $ref: "#/components/schemas/SessionTerminationPayload"

    AudioChunk:
      name: AudioChunk
      title: Audio Data Chunk
      summary: Client sends audio data as a base64-encoded string within a JSON object.
      contentType: application/json # Because it's {"audio_data": "..."}
      payload:
        $ref: "#/components/schemas/AudioDataWrapperPayload" # Wrapper for the base64 audio

    # Server to Client Messages
    SessionBegins:
      name: SessionBegins
      title: Session Begins Confirmation
      summary: Server message indicating the streaming session has successfully started.
      contentType: application/json
      payload:
        $ref: "#/components/schemas/SessionBeginsPayload"

    Transcript:
      name: Transcript
      title: Real-time Transcript
      summary: Server message containing real-time transcription results (can be partial or final).
      contentType: application/json
      payload:
        $ref: "#/components/schemas/TranscriptPayload"

    Turn:
      name: Turn
      title: Formatted Turn Result
      summary: Server message containing a formatted turn-based transcription result.
      contentType: application/json
      payload:
        $ref: "#/components/schemas/TurnPayload"

    Termination:
      name: Termination
      title: Session Terminated (Server Confirmation)
      summary: Server message confirming session termination, often with session statistics.
      contentType: application/json
      payload:
        $ref: "#/components/schemas/TerminationPayload"

    ErrorOccurred:
      name: ErrorOccurred
      title: Error Notification
      summary: Server message indicating an error occurred during the session.
      contentType: application/json
      payload:
        $ref: "#/components/schemas/ErrorPayload"

  schemas:
    # Schemas for client-sent message payloads
    UpdateConfigurationPayload:
      type: object
      properties:
        # 'type' field is not explicitly in AssemblyAI docs for this message,
        # but often WebSocket messages have a type identifier.
        # If AssemblyAI doesn't use a 'type' field for this specific message, remove it.
        # For now, assuming it might be needed for multiplexing if client sends various JSON objects.
        # message_type: # Renamed to avoid conflict with 'type' keyword if used as a property name
        #   type: string
        #   const: UpdateConfiguration # Example if type field is used
        word_finalization_max_wait_time:
          type: integer
          nullable: true
          description: Maximum time in ms to wait for word finalization.
        end_of_turn_confidence_threshold:
          type: number
          format: float
          nullable: true
          description: Confidence threshold (0-1) for detecting end of turn.
        min_end_of_turn_silence_when_confident:
          type: integer
          nullable: true
          description: Minimum silence duration in ms when confident about end of turn.
        max_turn_silence:
          type: integer
          nullable: true
          description: Maximum silence duration in ms before ending turn.
      # required:
      #   - message_type # if message_type is used

    ForceEndpointPayload: # AssemblyAI docs state this is an empty JSON object {}
      type: object
      description: An empty JSON object to force an endpoint.
      additionalProperties: false # Ensures it's truly empty

    SessionTerminationPayload: # AssemblyAI docs state this is: {"terminate_session": true}
      type: object
      properties:
        terminate_session:
          type: boolean
          const: true # Value must be true
      required:
        - terminate_session

    AudioDataWrapperPayload: # Wrapper for the base64 audio string, as per AssemblyAI docs
      type: object
      properties:
        audio_data:
          type: string
          format: base64
          description: Base64-encoded audio data chunk.
          example: "UklGRiQAAABXQVZFZm10IBAAAAABAAEAgD4AAAB9AAACABAAZGF0YQAAAAA=" # Example (silent WAV)
      required:
        - audio_data

    # Schemas for server-sent message payloads
    SessionBeginsPayload: # Corresponds to AssemblyAI's "SessionBegins" message
      type: object
      properties:
        message_type: # Standardizing on message_type for server messages
          type: string
          const: SessionBegins
          description: Identifies the type of the message.
        session_id: # Was 'id' in original, standardizing to 'session_id'
          type: string
          format: uuid # Assuming it's a UUID
          description: Unique identifier for the streaming session.
        expires_at:
          type: string # AssemblyAI docs show this as an ISO 8601 string
          format: date-time
          description: ISO 8601 timestamp indicating when the session will expire.
      required:
        - message_type
        - session_id
        - expires_at

    Word: # Unchanged from your original schema
      type: object
      properties:
        word:
          type: string
          description: The transcribed word.
        start:
          type: integer
          description: Start time in milliseconds relative to the beginning of the audio stream.
        end:
          type: integer
          description: End time in milliseconds relative to the beginning of the audio stream.
        confidence:
          type: number
          format: float # Explicitly float
          minimum: 0
          maximum: 1
          description: Confidence score for the word (0.0 to 1.0).
        # 'word_is_final' is not standard in AssemblyAI's real-time response for individual words.
        # Finality is usually indicated by message type (e.g., PartialTranscript vs FinalTranscript)
        # or a flag on the transcript object. Removing if not applicable here.
        # If AssemblyAI does provide this per word, it can be added back.
        # For now, assuming finality is at transcript/turn level.
      required:
        - word
        - start
        - end
        - confidence

    TranscriptPayload: # Corresponds to AssemblyAI's "PartialTranscript" and "FinalTranscript"
      type: object
      properties:
        message_type:
          type: string
          enum: [PartialTranscript, FinalTranscript] # Distinguishes between partial and final
          description: Indicates if the transcript is partial or final.
        audio_start: # Was 'start'
          type: integer
          description: Start time of this transcript segment in milliseconds.
        audio_end: # Was 'end'
          type: integer
          description: End time of this transcript segment in milliseconds.
        confidence:
          type: number
          format: float
          minimum: 0
          maximum: 1
          description: Overall confidence of the transcribed text.
        text:
          type: string
          description: The transcribed text. Can be partial or final.
        words:
          type: array
          items:
            $ref: "#/components/schemas/Word"
          description: Array of word-level details for this transcript segment.
        # 'endpoint_confidence' and 'order' are not standard fields in AssemblyAI's real-time response.
        # These might be from a different API or custom interpretation. Removing for now to align with common AssemblyAI docs.
        # created: # AssemblyAI includes a 'created' timestamp
        #   type: string
        #   format: date-time
        #   description: Timestamp when the transcript was created.
        # utterance_id: # If AssemblyAI provides an ID for the utterance
        #   type: string
        #   format: uuid
        #   nullable: true
      required:
        - message_type
        - audio_start
        - audio_end
        - confidence
        - text
        - words
        # - created

    TurnPayload: # Corresponds to AssemblyAI's "TurnEnd" message (if that's what this maps to)
      # Or if it's a distinct "Turn" message type.
      # Assuming this is a specific type of final transcript representing a "turn".
      type: object
      properties:
        message_type:
          type: string
          const: FormattedTurn # Example, if turns are a specific message type
          description: Identifies the message as a formatted turn.
        # 'turn_order', 'turn_is_formatted', 'end_of_turn', 'end_of_turn_confidence', 'order_idx'
        # These fields seem specific. If they are part of AssemblyAI's "Turn" message, keep them.
        # Otherwise, a turn might just be a "FinalTranscript" with specific characteristics.
        # For now, keeping structure similar to your original, assuming these fields are valid.
        turn_order:
          type: integer
          description: Order of this turn in the conversation.
        turn_is_formatted:
          type: boolean
          description: Whether this turn has been formatted.
        end_of_turn: # This might be redundant if the message itself signifies end of turn
          type: boolean
          description: Whether this marks the end of a turn.
        transcript: # This is the text of the turn
          type: string
          description: The complete turn transcript.
        end_of_turn_confidence:
          type: number
          format: float
          minimum: 0
          maximum: 1
          description: Confidence that this is the end of a turn.
        words:
          type: array
          items:
            $ref: "#/components/schemas/Word"
          description: Array of word-level details for this turn.
        order_idx: # Consider renaming for clarity, e.g., session_order_index
          type: integer
          description: Order index within the session.
      required:
        - message_type
        - turn_order
        - turn_is_formatted
        - end_of_turn
        - transcript
        - end_of_turn_confidence
        - words
        - order_idx

    TerminationPayload: # Corresponds to AssemblyAI's "SessionTerminated" message
      type: object
      properties:
        message_type:
          type: string
          const: SessionTerminated
          description: Indicates the session has been terminated.
        # 'audio_duration_seconds' and 'session_duration_seconds' are not standard in AssemblyAI's real-time "SessionTerminated" message.
        # That message is usually just a confirmation. Statistics might come from a different call or context.
        # If AssemblyAI provides these in the WebSocket termination message, they can be included.
        # For now, making it a simple confirmation.
        # Example: {"message_type": "SessionTerminated", "reason": "Client initiated"}
        reason:
          type: string
          nullable: true
          description: Reason for session termination.
      required:
        - message_type

    ErrorPayload:
      type: object
      properties:
        message_type:
          type: string
          const: Error
          description: Indicates an error message.
        error_code: # AssemblyAI uses a string error message, not typically a code in WebSocket errors.
          type: integer # Or string if AssemblyAI uses string codes
          nullable: true
          description: Optional error code.
        error: # AssemblyAI's error message usually has an "error" field with a string description.
          type: string
          description: Description of the error.
        # request_id: # If errors are correlated with a request_id
        #   type: string
        #   format: uuid
        #   nullable: true
        #   description: Unique identifier for the request that caused the error, if applicable.
      required:
        - message_type
        - error

    # This schema was in your original list but not directly used as a message payload.
    # Its properties are now defined as channel parameters.
    # ConnectionParameters:
    #   type: object
    #   description: Initial connection parameters (typically sent as query params or in connection message)
    #   properties:
    #     sample_rate:
    #       type: integer
    #     # ... and so on for all parameters
